Какие из следующих функций обеспечивают строгую гарантию безопасности исключений?

std::pair<T*,V*> fun1()  constructor
{
    return std::make_pair(new T, new V); //-
//make_pair provides the same level of guarantees to each object as provided by the corresponding element
}
std::pair<std::unique_ptr<T>,std::unique_ptr<V>> fun2() 
{
    return std::make_pair( //- не зафиксирован порядок вычисления. Соответственно, может так случиться, что сначала будет вызван один new, а потому другой new и только после этого создадутся unique_ptr. Если второй new бросит исключение, то возникнет memory leak.
                std::unique_ptr<T>(new T),
                std::unique_ptr<V>(new V));
}
std::pair<std::unique_ptr<T>,std::unique_ptr<V>> fun3() //+
{
    std::unique_ptr<T> pt(new T); //unique_ptr позаботится о сворачивании стека в случае ошибки
    std::unique_ptr<V> pv(new V);
    return std::make_pair(std::move(pt), std::move(pv));
}
void fun4(std::vector<std::string> & v) //+
{
    std::reverse(v.begin(), v.end());
//Throws if either an element swap or an operation on an iterator throws.
//Note that invalid arguments cause undefined behavior
//или более правдивее случай что просто используется swap() для обмена элементами
}
void fun5(std::vector<std::string> & v, std::string const& s)//--
{
    std::fill(v.begin(), v.end(), s); //происходит копирование, потенциально возможно ислючение? 
}

void fun6(std::vector<std::string> & v, std::string const& s)//++
{
    std::vector<std::string>(v.size(), s).swap(v); //Strong guarantee: no effects in case an exception is thrown.
}
