Отметьте верные утверждения.

Если у класса, объекты которого хранятся в стеке, есть небросающие перемещающие методы, то можно реализовать такой возвращающий pop со строгой гарантией безопасности исключений.

+ Обеспечить строгую гарантию безопасности для метода pop, который возвращает выталкиваемый элемент, не получается из-за возможного исключения при копировании возвращаемого объекта.
 Если у класса, объекты которого хранятся в стеке, есть перемещающий конструктор, то исходная реализация (см. степ 10) обеспечивает строгую гарантию безопасности исключений.
+ Если у класса, объекты которого хранятся в стеке, есть небросающий перемещающий конструктор, то исходная реализация (см. степ 10) обеспечивает строгую гарантию безопасности исключений. (как я понял, из-за оптимизаций компилятора, будет исползован небросающий перемещающий конструктор)
 Если у класса, объекты которого хранятся в стеке, есть небросающий перемещающий конструктор, то исходная реализация (см. степ 10) не обеспечивает строгую гарантию безопасности исключений, но этого можно добиться добавив std::move в строке с return.
 Проблема обеспечения строгой гарантии безопасности возвращающего метода pop возникает только для стеков, которые реализованы на массиве.
+ Проблема обеспечения строгой гарантии безопасности возвращающего метода pop актуальна для произвольных контейнеров.


реализация стека о котором говорится в задании

template <class T>
struct Stack{
std::vector<T> data_;

void push(const T& t){
    data_.push_back(t);
}

T pop(){
    T temp = data_.back();
    data_.pop_back();
    return temp;
}
};
