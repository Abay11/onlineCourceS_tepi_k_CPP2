Давайте изучим следующий код:

extern bool X;
extern bool Y;

struct A
{
    A() { ... }

    ~A() 
    {
         try 
         {
             bar();
         } 
         catch (std::exception const & e) 
         {
             log("~A()", e.what());
         }
    }
    B b;
};

void foo() 
{
    A a;
    if (X)
        throw std::runtime_error("Some message");
}

void bar() 
{
    if (Y)
        throw std::logic_error("Some message");
}
Отметьте верные утверждения.

Замечание: в вопросах предполагается, что конструкторы классов A и B не бросают исключения, если не указано обратное.


 Если при вызове foo() X и Y равны true, то программа завершится аварийно, т.к. одновременно в программе будет два исключения.
 Программа некорректна, т.к. деструктор класса A бросает исключение.
 +Если при вызове foo() X = false, то и никакое исключение не покинет функцию foo().
 +Если при вызове foo() X = true, то функцию foo() покинет только исключение std::runtime_error.
 Если при вызове foo() конструктор А бросит исключение, то при X = Y = true произойдёт аварийное завершение программы.
 Если при вызове foo() конструктор B бросит исключение, то при X = Y = true никакое исключение не покинет функцию foo().
